"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarkdownService = void 0;
const fs_1 = require("fs");
const inversify_1 = require("inversify");
require("reflect-metadata");
const headingsRegEx = '^\\s*(?<level>#{2,6})\\s((?<heading>.*))$';
const codeBlockRegEx = '(```[a-z]*\n[\\s\\S]*?\n\\s*```)';
/**
 * MarkdownService
 * provides method to parse and manipulates markdown files
 */
let MarkdownService = class MarkdownService {
    constructor() {
        this._headingsRegEx = new RegExp(headingsRegEx);
        this._codeBlockRegEx = new RegExp(codeBlockRegEx, 'g');
    }
    /**
     * parse given markdown file
     */
    parseMarkdown(filePath) {
        return fs_1.readFileSync(filePath).toString();
    }
    /**
     * update given markdown file with toc
     * @param content - markdown file content with updated toc
     */
    updateMarkdown(filePath, content) {
        return fs_1.writeFileSync(filePath, content);
    }
    /*
     * extract headings from given markdown file
     * @returns collection of headings structure
     */
    parseHeadings(content) {
        const headings = [];
        for (const line of content.split('\n')) {
            const match = this._headingsRegEx.exec(line);
            if (match && match.groups && match.groups.level && match.groups.heading) {
                const heading = match.groups.heading.trim();
                headings.push({
                    heading,
                    level: match.groups.level.length - 1,
                    counter: headings.filter((item) => { var _a; return ((_a = item.heading) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === heading.toLowerCase(); }).length,
                });
            }
        }
        return headings;
    }
    /**
     * removes the code blocks of the given markdown
     * this is useful for parse headings and avoid parsing pseudo
     * headings in code blocks
     * @param content - markdown content which should be manipulated
     * @returns cleaned markdown content without code blocks
     */
    removeCodeBlocks(content) {
        const contentWithoutCodeblocks = content.replace(this._codeBlockRegEx, '');
        return contentWithoutCodeblocks;
    }
    /**
     * set max depth for parse headers level
     * @param maxDepth - max level of heading which should be parsed
     */
    setMaxDepth(maxDepth) {
        if (maxDepth >= 2 && maxDepth <= 6) {
            this._headingsRegEx = new RegExp(headingsRegEx.replace('6', maxDepth.toString()));
        }
    }
};
MarkdownService = __decorate([
    inversify_1.injectable(),
    __metadata("design:paramtypes", [])
], MarkdownService);
exports.MarkdownService = MarkdownService;
